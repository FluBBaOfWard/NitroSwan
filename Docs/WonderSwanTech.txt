   ___ ___         _
  /   |   \ ___ __/ \__ ___  ___  /\__
  \  / \  // __>\_   _// __|/ __\/    \
   \_____/_\__ \  \_/  \___|\___/\_/\_/
          \____/      2022-11-13

1. ABOUT
   WStech original doc made by Judge and Dox
   Special thanks to -anonymous- contributor for some usefull info.

   - correct info about Sprite Table, BG Map and FG Map  locations    	
	(ports $04 and $07 - section 10)
    Special thanks to mika-n

2. CPU

  Bandai SPGY-1001 ASWAN 9850KK003
  NEC V30 MZ - fast version of V30 with internal pipeline (16 bytes prefetch buffer) running at 3.072 MHz.
  V30 MZ is aprox 4 times faster than V30.
  The V30MZ performs pipeline processing internally, performing instruction fetch (prefetch), instruction decode, and
  instruction execution in parallel. For this reason, it is difficult to determine what part of the program is currently being
  executed by monitoring the output of the address bus for the instruction code fetch.
  If there are conditional branch instructions, even in case branching does not occur, the address of the branch
  destination is prefetched (only one time), so that further monitoring of the program is difficult.
  The V30MZ has 8 prefetch queues (16 bytes).

  There are a few other differences between V30MZ and V30 cpu (unsupported opcodes , different flag handling after mul/div).

  Timing:

  Hblank : 256 CPU cycles
  Vblank : 159 Hblank = 3072000/159*256 = 75.47Hz


3. MEMORY

   20 bit addressing space = 1 Megabyte. Memory is splitted into 64KB blocks (segments/banks).

        Segments:

        0 - RAM - 16 KB (WS) / 64 KB (WSC) internal RAM (see below)

        1 - SRAM (cart) SRAM is BSI device BS62LV256TC - 256K(32Kx8) Static RAM - TSOP 0 - 70 c, 70 ns (http://www.bsi.com.tw/product/bs62lv256.pdf)

        2 - ROM Bank (initial bank = last)
        3 - ROM Bank (lnitial bank = last)

        4 - ROM Bank (initial bank = last - 11)
        5 - ROM Bank (initial bank = last - 10)
        6 - ROM Bank (initial bank = last - 9)
        7 - ROM Bank (initial bank = last - 8)
        8 - ROM Bank (initial bank = last - 7)
        9 - ROM Bank (initial bank = last - 6)
        A - ROM Bank (initial bank = last - 5)
        B - ROM Bank (initial bank = last - 4)
        C - ROM Bank (initial bank = last - 3)
        D - ROM Bank (initial bank = last - 2)
        E - ROM Bank (initial bank = last - 1)
        F - ROM Bank (initial bank = last)

        Segments 2-$F are switchable using ports :

        $C2 - Segment 2 (value written to port is ROM Bank number  ($FF means last ROM bank (last 64 kbytes of ROM file) , $FE  = last - 1 .. etc)
        $C3 - Segment 3 (same as above)
        $C0 - Segments 4-$F - bits 0,1,2 and 3 of port $C0 are bits 4,5,6 and 7 of ROM bank number in segments 4-$F . Bits 0-3
              are taken from segment number ( for example , IO[$C0]=$4E  -> segment 9 contains ROM bank $E9).

  RAM Map :

      $0000 - $1FFF                           WS/WSC
      $2000 - $3FFF    4 Col Tiles (Bank 0)   WS/WSC
      -------------
      $4000 - $5FFF    4 Col Tiles Bank 1     WSC only
      $4000 - $7FFF   16 Col Tiles Bank 0     WSC only
      $8000 - $BFFF   16 Col Tiles Bank 1     WSC only
      $C000 - $FDFF                           WSC only
      $FE00 - $FFFF   Palettes (WSC)          WSC only

4. VIDEO

   Screen size     - 224 x 144 pixels (28 x 18 tiles)
   Tile size       - 8 x 8 dots , 16 bytes/tile (4 col modes) or 32 bytes/tile (16 col modes)
   Map size        - 256 x 256 pixels (32 x 32 tiles)
   Layers          - Two layers - Background and Foreground (top layer)
   Maps locations  - Selectable using port $07
   Tiles locations - Fixed, two banks - first at $2000/$4000 , second at ($4000/)$8000
   Map format      - Each position in the map is defined by one word:
                      bits 0 - 8   - Tile number (0-511)
                      bits 9 - 12  - Palette number (0-15)
                      bit 13       - WS = unused / WSC = tile bank
                      bit 14       - Horizontal flip
                      bit 15       - Vertical flip
   Tile formats    - Depends on video mode (port $60)
   Sprites         - Max 128 sprites , limited to max 32 per scanline
                     sprite format:
                     byte 0,1 - bits
                                0 - 8   - Tile number (0-511)
                                9 - 11  - Palette number (0-7) + 8 -> (8-15)
                                12      - Sprite window clipping on/off
                                13      - Priority with respect to the layers
                                          0 - appear between the 2 background and foreground layers
                                          1 - appear on top of both layers
                                14      - Horizontal flip
                                15      - Vertical flip
                     byte 2 - Y position on the screen
                     byte 3 - X position on the screen

                     Sprite table is buffered during frame display.
                     Probably up to scanline 140 (1238-144?)

   Colors          - Wonderswan (Mono) is capable of showing 16 shades of gray(only 8 can be selected at any one time)
                     These 8 shades form a pool from which the palette definition can select shades. There are 16 palettes.
                     All 16 palettes are used by BG and FG layers , the last 8 are used also by sprites.
                     Which 8 colors are used for palette generation is defined by ports 1C and 1E- port 1C
                     defines palette colors 0 - 3, port 1E defines 4 - 7. Each palette selection is 4 bits in
                     size:
                       1C : 11110000
                       1D : 33332222
                       1E : 55554444
                       1F : 77776666

                      (where color 15 is the darkest one)

                      Ports 20 - 3E are used to define the palettes themselves.
                        20 : x111x000 - palette #0
                        21 : x333x222

                     In color video modes each color is defined using one word,
                        where bits:
                              0 -  3  Blue
                              4 -  7  Green
                              8 - 11  Red
                             12 - 15  unused
                     Color palettes are stored in the RAM (segment 0) , at address $FE00

   Scrolling       - Each of layers can be scrolled horizontal or vertical using ports $10 - $13

   Transparency    - Wonderswan       - if bit 3 on palette number is set - color 0 of that palette is transparent
                     Wonderswan color - color 0 of each palette is transparent
   Windows         - There are two windows - rectangular areas for disabling /enabling FG layer (FG window) or sprites(Sprite window)

5. SOUND

   4 Audio channels.
   Each channel can play short samples ( 4 bit , 16 bytes ( 32 samples = 2 samples in  byte (bits 0-3 and 4-7))
   with selectable frequency = 3,072 *10e6  / ((2048 - N) x 32 ) Hz , where N = 11 bit value.
   Location of those samples is unknown.

   Volume of each audio channel is controlled by writing two 4 bit values ( for left/right output
   channel) into ports $88 - $8B. Master volume is controlled by port $91
   (2 bit value = first 'used' bit in master volume output (11 bit wide), D/A converter can
   read only 8 bits, starting from bit set in port $91, for example if first 'used' bit
   is set to 2, D/A using bits 2,3,4,5,6,7,8,9 for audio output)

   Additional (selectable) functions :
    - channel 2 - voice - can play 8 bit samples writing frequently data to ch2 volume I/O port
    - channel 3 - sweep - two parameters:
                        - step = 2.667 x (N + 1) ms , where N = 5 bit value
                        - value - signed byte (-128  - 127)
    - channel 4 - noise - 7 selectable noise generators (probably I/O port $8E)

   For detailed info please check ports $80 - $91 in section I/O Ports.

   There's also Audio DMA (please check ports $4a - $52).
   Transfer rate is 12KHz (HBlank).
   I/O ports $4A-$4B and $4E-$4F are autoupdated during data transfer.

6. ROM HEADER

 Header taking last 16 bytes of each ROM file.
 Bytes  :
 0-4 Long jump instruction
 5   - bit 7 - Skip custom boot screen
 6   - Developer ID
 7   - Minimum support system
       00 - WS Mono
       01 - WS Color
 8   - Cart ID number for developer defined at byte 0
 9   - Cart revision
       bit 7 = allow full EEPROM access
 10  - ROM Size
       01 - ?
       02 - 4Mbit
       03 - 8Mbit
       04 - 16Mbit
       05 - ?
       06 - 32Mbit
       07 - ?
       08 - 64Mbit
       09 - 128Mbit
 11  - SRAM/EEPROM Size
       00 - 0k
       01 - 64k SRAM
       02 - 256k SRAM
       03 - 1M SRAM (Taikyoku Igo Heisei Kiin)
       04 - 2M SRAM (WonderWitch, Dicing Knight)
       05 - 4M SRAM
       10 - 1k EEPROM
       20 - 16k EEPROM
       50 - 8k EEPROM
 12  - Additional capabilities(?)
       - bit 0 - 1 - vertical position , 1 - horizontal position
       - bit 2 - always 1

 13  - 1 - RTC (Real Time Clock)
 14,15 - Checksum = sum of all ROM bytes except two last ones ( where checksum is stored)

7. INTERRUPTS
   The Wonderswan CPU recognizes 7 interrupts from the hardware, these are:
    7 - HBlank Timer
    6 - VBlank
    5 - VBlank Timer
    4 - Drawing line detection
    3 - Serial Receive
    2 - RTC Alarm (cartridge)
    1 - Key press
    0 - Serial Send

  Whether the CPU should indeed take action when one of these interrupts come in
  is determined by port B2. The above mentioned interrupts correspond with the bit
  numbers of port B2. When an interrupt occurs the corresponding bit of port B6 gets
  set to 1 and, if enabled, an interrupt to the CPU is generated. This bit of port B6
  will have to be cleared through code when the interrupt has been handled.

  Example:
   The Wonderswan is set to react to VBlank begin interrupts. Then bit 6 of B6 is set high
   and keeps the interrupt line high until the CPU is able to take action upon this interrupt.
   A typical VBlank interrupt routine is as follows:
        <push registers>
        <do some useful work>
        out B6,40
        <pop registers>
        iret

   The mentioned interrupts do not correspond with the same interrupt numbers for the vectors
   in the vector table. The base for the actual interrupt numbers is set through port B0. If B0
   is set to 20h then a VBlank begin interrupt routine must be set at vector 26h. (Base is 20h
   and VBlank begin interrupt is 6)

8. CONTROLS  -  It's easy to check buttons status reading/writing port $B5(see below).
     There's required some delay between writing and reading port $B5 ( few NOP-s)

9. Internal EEPROM Communication(?) and 'owner' info structure
   I/O Ports in range 0xBA -0xBE seems to be used for serial reading of internal
   WS EEPROM (for example  - 'owner' info).

    0xBA (Word) - Data
    0xBC (Word) - Address (calculated probably Modulo EEPROM size (unknown))
    0xBE (Byte) - Communication (?)
                   bit 4 set before reading data
                   bit 1 set by hardware, when data is ready to read

    Example :

        mov    ax, $1B9
        out   $BC, ax
        mov    al, $10
        out   $BE, al
        xor    dx, dx
   miniloop:
        inc    dx
        cmp    dl, 32
        jnc    bad_data
        in     al, $BE
        and    al, 1
        jz     miniloop
        in     ax, $BA    ; Month and Day of birth


   'Owner' info structure :

    - Name            - 16 bytes ( 0 = Space, 1 = '0' ... 0xA = '9', 0xB = 'A'... )
    - Year of birth   -  2 bytes (BCD)
    - Month of birth  -  1 byte  (BCD)
    - Day of birth    -  1 byte  (BCD)
    - Sex             -  1 byte (0 - ?, 1 - male , 2 - female)
    - Blood           -  1 byte (0 - ?, 1 - A, 2 - B, 3 - O, 4 - AB)


    Struct size - 22 bytes  = 11 reads,
    Address range = 0x40 - 0x4A

10. I/O PORTS (port number /initial value / description)

 - $00 - $00 - Display control
                bit 5 - fg win on/off (window coords defined in ports $08 - $0B)
                bit 4 - fg inside/outside win
                        0  FG layer is displayed only inside window
                        1  FG layer is displayed outside window
                bit 3 - sprite window on/off (window coords defined in ports $0C - $0F)
                bit 2 - sprites on/off
                bit 1 - foreground layer on/off
                bit 0 - background layer on/off
 - $01 - $00 - Determines the background color
                bit 7-0 - background palette (WSC only)
                bit 2-0 - background color (WS Only)
 - $02 - ??? - Current Line (0 - 158) (159 ???)
 - $03 - $BB - Line compare (for drawning line detection interrupt)
 - $04 - $00 - Determines the base address for the sprite table.
                bit 5-0 - bit 14-9 of address (WSC).
                bit 4-0 - bit 13-9 of address (WS).
                To get the address of the table, shift this value left 9 times.
		        (Sprite Attribute Table Base can move from $00000-$07E00 with $200 bytes step)
 - $05 - $00 - Determines the number of the sprite to start drawing with
 - $06 - $00 - Determines the number of the sprite to stop drawing.
 - $07 - $26 - Determines the location of the foreground and background screens in RAM.
                bits 7-0 : ffffbbbb
                bit  7   - MSB WSC
                bits 6-4 - Determines foreground location (address is 00fff000 00000000)
                bit  3   - MSB WSC
                bits 2-0 - Determines background location (address is 00bbb000 00000000)
		        Back Ground Tile Map Base can move from $00000-$03800 ($800 bytes step)
 - $08 - $FE - x0 of FG window (x0,y0) = top left corner,  (x1,y1) = bottom right corner
 - $09 - $DE - y0 of FG window
 - $0A - $F9 - x1 of FG window
 - $0B - $FB - y1 of FG window
 - $0C - $DB - x0 of SPR window
 - $0D - $D7 - y0 of SPR window
 - $0E - $7F - x1 of SPR window
 - $0F - $F5 - y1 of SPR window
 - $10 - $00 - Background layer X scroll register
 - $11 - $00 - Background layer Y scroll register
 - $12 - $00 - Foreground layer X scroll register
 - $13 - $00 - Foreground layer Y scroll register
 - $14 - $01 - LCD Control (???)
                bit 0 - LCD on/off
                bit 1 - Contrast (only WS Color), 0 low, 1 high.
 - $15 - $00 - LCD Icons
                bit 7 - 0
                bit 6 - 0
                bit 5 - Dot 3
                bit 4 - Dot 2
                bit 3 - Dot 1
                bit 2 - Horizontal Position
                bit 1 - Vertical Position
                bit 0 - LCD Sleep
 - $16 - $9E - VTotal, last scanline.
 - $17 - $9B - VSync, which line vsync is sent? Doesn't exist on SwanCrystal.
 - $18 - $00 - ???
 - $19 - $00 - ???
 - $1A - $00 - LCD Volume
                bit 4 - Set when the LCD volume icon is being displayed.
                bit 2-3 - Volume level
                bit 1 - 0
                bit 0 - LCD Sleep
 - $1B - $00 - ???
 - $1C - $99 - PALCOL10
 - $1D - $FD - PALCOL32
 - $1E - $B7 - PALCOL54
 - $1F - $DF - PALCOL76
 - $20 - $30 - PAL00
 - $21 - $57 - PAL01
 - $22 - $75 - PAL10
 - $23 - $76 - PAL11
 - $24 - $15 - PAL20
 - $25 - $73 - PAL21
 - $26 - $77 - PAL30
 - $27 - $77 - PAL31
 - $28 - $20 - PAL40
 - $29 - $75 - PAL41
 - $2A - $50 - PAL50
 - $2B - $36 - PAL51
 - $2C - $70 - PAL60
 - $2D - $67 - PAL61
 - $2E - $50 - PAL70
 - $2F - $77 - PAL71
 - $30 - $57 - PAL80
 - $31 - $54 - PAL81
 - $32 - $75 - PAL90
 - $33 - $77 - PAL91
 - $34 - $75 - PALA0
 - $35 - $17 - PALA1
 - $36 - $37 - PALB0
 - $37 - $73 - PALB1
 - $38 - $50 - PALC0
 - $39 - $57 - PALC1
 - $3A - $60 - PALD0
 - $3B - $77 - PALD1
 - $3C - $70 - PALE0
 - $3D - $77 - PALE1
 - $3E - $10 - PALF0
 - $3F - $73 - PALF1
 - $40 - $00 - DMA (?) copy source address
 - $41 - $00 - ^^^
 - $42 - $00 - copy source bank
 - $43 - $00 - 0
 - $44 - $00 - copy destination address
 - $45 - $00 - ^^^
 - $46 - $00 - size of copied data (in bytes)
 - $47 - $00 - ^^^
 - $48 - $00 - bit 7 = 1  -> copy start
                (bit 7=0 when data transfer is finished)
                ports $40-$48 are updated during copy process
               bit 6 inc/dec
 - $49 - $00 - 0

 - $4A - $00 - Sound DMA source address
 - $4B - $00 - ^^^
 - $4C - $00 - Sound DMA source memory segment bank
 - $4D - $00 - 0
 - $4E - $00 - Sound DMA transfer size (in bytes)
 - $4F - $00 - ^^^
 - $50 - $00 - ^^^
 - $51 - $00 - 0
 - $52 - $00 - Sound DMA control
               bit 7 = 1 -> DMA start
               bit 6 = inc/dec
               bit 4 = destination, 0=SND_VOL_2, 1=HYPER_VOICE
               bit 3 = 1 -> DMA loop
               bit 2 = ???, if set DMA doesn't appear to work.
               bit 0-1 = rate, 0=4kHz, 1=6kHz, 2=12kHz, 3=24kHz.
 - $53 - $00 - 0
 - $54 - $00 - ???
 - $55 - $00 - ???
 - $56 - $00 - ???
 - $57 - $00 - ???
 - $58 - $00 - ???
 - $59 - $00 - ???
 - $5A - $00 - ???
 - $5B - $00 - ???
 - $5C - $00 - ???
 - $5D - $00 - ???
 - $5E - $00 - ???
 - $5F - $00 - ???
 - $60 - $0A - Video mode
               Meaning of bits 7-5:
                765
                ---
                111   16 col/tile 'packed' mode   -  tiles like in Genesis, 16 col/tile
                110   16 col/tile 'layered' mode  -  tiles like in GameGear, 16 col/tile
                010    4 col/tile                 -  the same as mono (below) but using color palettes, 4 cols/tile, one tile = 16 bytes, WSC only
                000    4 col/tile mono            -  tiles like in GameBoy,
                [bit 7 = 16/4 color/tile , bit 6 - color/mono mode, bit 5 - 'packed' mode on/off]
 - $61 - $00 - ???
 - $62 - $00 - WSC System
               bit 7 = System (0=WonderSwan Color, 1=SwanCrystal)
               bit 0 = Power off, write 1
 - $63 - $00 - ???
 - $64 - $00 - ???
 - $65 - $00 - ???
 - $66 - $00 - ???
 - $67 - $00 - ???
 - $68 - $00 - ???
 - $69 - $00 - ???
 - $6A - $00 - REG_HYPER_CTRL
               bit 7   = Enable
               bit 4-6 = Unknown
               bit 2-3 = Scaling mode
							0   data <<3-vol
							1   data <<3-vol | (-0x100 << 3-vol)
							2   data <<3-vol
							3   data <<3
               bit 0-1 = vol
 - $6B - $0F - REG_HYPER_CHAN_CTRL
               bit 6     Right channel enable
               bit 5     Left channel enable
               bit 0-3   Nothing?
 - $6C - $00 - ???
 - $6D - $00 - ???
 - $6E - $00 - ???
 - $6F - $00 - ???
 - $70 - $00 - REG_UNK_70 SwanCrystal=$D0 Written by SC Bootrom
 - $71 - $00 - REG_UNK_71 SwanCrystal=$77
 - $72 - $00 - REG_UNK_72 SwanCrystal=$F7
 - $73 - $00 - REG_UNK_73 SwanCrystal=$06
 - $74 - $00 - REG_UNK_74 SwanCrystal=$E2
 - $75 - $00 - REG_UNK_75 SwanCrystal=$0A
 - $76 - $00 - REG_UNK_76 SwanCrystal=$EA
 - $77 - $00 - REG_UNK_77 SwanCrystal=$EE
 - $78 - $00 - ???
 - $79 - $00 - ???
 - $7A - $00 - ???
 - $7B - $00 - ???
 - $7C - $00 - ???
 - $7D - $00 - ???
 - $7E - $00 - ???
 - $7F - $00 - ???
 - $80 - $00 - Audio 1 Freq
 - $81 - $00 - ^^^
 - $82 - $00 - Audio 2 Freq
 - $83 - $00 - ^^^
 - $84 - $00 - Audio 3 Freq
 - $85 - $00 - ^^^
 - $86 - $00 - Audio 4 Freq
 - $87 - $00 - ^^^
 - $88 - $00 - Audio 1 volume
 - $89 - $00 - Audio 2 volume
 - $8A - $00 - Audio 3 volume
 - $8B - $00 - Audio 4 volume
 - $8C - $00 - ?? Sweep value
 - $8D - $1F - ?? Sweep step
 - $8E - $00 - Noise control
                Bits :
                7 - ???
                6 - ???
                5 - ???
                4 - Enable
                3 - Reset
                2 - ^^^
                1 - ^^^
                0 - Noise generator type
 - $8F - $00 - Sample  location
                To get the address of samples, shift this value left 6 times.
                0 00xxxxxx xx000000
 - $90 - $00 - Audio control
                Bits:
                7 - Audio 4 Noise
                6 - Audio 3 Sweep
                5 - Audio 2 Voice
                4 - 0
                3 - Audio 4 on/off
                2 - Audio 3 on/off
                1 - Audio 2 on/off
                0 - Audio 1 on/off
 - $91 - $00 - Audio Output
                Bits :
                7 - Headphones connected
                6 - 0
                5 - 0
                4 - 0
                3 - Enable headphones
                2 - Output Volume
                1 - ^^^
                0 - Main speaker enable
 - $92 - $00 - Noise Counter Shift Register (15 bits)
 - $93 - $00 - ^^^
 - $94 - $00 - Voice Volume (4 bit)
 - $95 - $00 - REG_SND_HYPERVOICE
 - $96 - $00 - SND_OUT_R (channels 1-4) right channel output, 10-bit, read-only
 - $97 - $00 - ^^^
 - $98 - $00 - SND_OUT_L (channels 1-4) left channel output, 10-bit, read-only
 - $99 - $00 - ^^^
 - $9A - $00 - SND_OUT_M left+right channels sum, 11-bit, read-only just the sequencer - no Hyper Voice
 - $9B - $00 - ^^^
 - $9C - $00 - REG_SND_9C
 - $9D - $00 - REG_SND_9D
 - $9E - $03 - Volume set from Bios 0-3. Changes the volume as well as the corresponding LCD segments.
 - $9F - $00 - ???
 - $A0 - $87 - Hardware type
                bit 7 - 1 = finnished booting?
                bit 3     = Cart ROM speed (0=3 cycle, 1=1 cycle)
                bit 2 - 1 = 16bit cart access, 0 = 8 bit access
                bit 1 - 1 = color, 0 = mono
                bit 0 - 1 = lock the boot rom
 - $A1 - $00 - ???
 - $A2 - $0C - Timer Control
                bit 0 - Hblank Timer on/off
                bit 1 - Hblank Timer Mode
                        0 - One Shot
                        1 - Auto Preset
                bit 2 - Vblank Timer(1/75s) on/off
                bit 3 - Vblank Timer Mode
                        0 - One Shot
                        1 - Auto Preset
 - $A3 - $00 - ^^^
 - $A4 - $00 - Hblank Timer 'frequency'
                0 = no HBLANK Interrupt
                n = HBLANK Interrupt every n lines
 - $A5 - $00 - ^^^
 - $A6 - $4F - Vblank Timer 'frequency'
 - $A7 - $FF - ^^^
 - $A8 - $00 - Hblank Counter - 1/12000s
 - $A9 - $00 - Hblank Counter - 1/(12000>>8)s
 - $AA - $00 - Vblank Counter - 1/75s
 - $AB - $00 - Vblank Counter - 1/(75>>8)s
 - $AC - $00 - ???
 - $AD - $00 - ???
 - $AE - $00 - ???
 - $AF - $00 - ???
 - $B0 - $00 - Interrupt Base
 - $B1 - $DB - Communication byte
 - $B2 - $00 - Interrupt enable
               This enables latching of each individual interrupt source.
                bit 7 - HBlank Timer
                bit 6 - VBlank begin
                bit 5 - VBlank Timer
                bit 4 - Drawing line detection
                bit 3 - Serial receive
                bit 2 - RTC Alarm (cartridge)
                bit 1 - Key press
                bit 0 - Serial transmit
 - $B3 - $00 - Communication direction
                bit 7 - Serial Enable
                bit 6 - Connection Speed
                        0 - 9600  bps
                        1 - 38400 bps
                bit 5 - Overrun Reset
                bit 4 - 0
                bit 3 - 0
                bit 2 - Send Buffer Empty
                bit 1 - Overrun
                bit 0 - Receive Complete

                        write $00-$7f = read $00
                        write $80-$bf = read $84
                        write $c0-$cf = read $c4
 - $B4 - $00 - Interrupt status
                bit 7 - HBlank Timer
                bit 6 - VBlank begin
                bit 5 - VBlank Timer
                bit 4 - Drawing line detection
                bit 3 - Serial receive
                bit 2 - RTC Alarm (cartridge)
                bit 1 - Key press
                bit 0 - Serial transmit
 - $B5 - $40 - Controls
                bits 4-7 : read/write - Select line of inputs to read
                        0001 - read vertical cursors
                        0010 - read horizontal cursors
                        0100 - read buttons
                bits 0-3 : read only - Read the current state of the input lines (positive logic) after having written 10h,20h, or 40h.
                        Meaning of the bits when reading cursors:
                                bit 0 - cursor up
                                bit 1 - cursor right
                                bit 2 - cursor down
                                bit 3 - cursor left
                        Meaning of the bits when reading buttons:
                                bit 0 - ???
                                bit 1 - START
                                bit 2 - A
                                bit 3 - B
 - $B6 - $00 - Interrupt Acknowledge
                bit 7 - HBlank Timer
                bit 6 - VBlank begin
                bit 5 - VBlank Timer
                bit 4 - Drawing line detection
                bit 3 - Serial receive
                bit 2 - RTC Alarm (cartridge)
                bit 1 - Key press
                bit 0 - Serial transmit
 - $B7 - $00 - INT_NMI_CTRL
                bit 5-7 - ???
                bit 4 - Enable/disable NMI when battery low
                bit 0-3 - ???
 - $B8 - $00 - ???
 - $B9 - $00 - ???
 - $BA - $01 - Internal EEPROM Data
 - $BB - $00 - ^^^
 - $BC - $42 - Internal EEPROM Address
 - $BD - $00 - ^^^
 - $BE - $83 - Internal EEPROM Command/Status
                bit 7 - Reset
                bit 6 - Erase/Protect
                bit 5 - Write
                bit 4 - Read
                bit 3 - Reset complete (Read only)
                bit 2 - Erase complete (Read only)
                bit 1 - Write complete (Read only)
                bit 0 - Read complete (Read only)
 - $BF - $00 - ^^^

---------------------------------------------------------------------
Mapped to cartridge. 2001/Luxsor1 & 2003/Luxsor2
---------------------------------------------------------------------
 - $C0 - $2F - ROM Bank Base Selector for segments 4-$F
 - $C1 - $3F - SRAM Bank selector (0x10000))
 - $C2 - $FF - BNK2SLCT - ROM Bank selector for segment 2
 - $C3 - $FF - BNK3SLCT - ROM Bank selector for segment 3
 - $C4 - $00 - EEPROM Data
 - $C5 - $00 - ^^^
 - $C6 - $00 - EEPROM address:
 - $C7 - $00 - ^^^
               1kbit EEPROM (16bit*64) :
                - bits 0-5 - address
                - bits 6-7 - command :
                           0 - Extended Comand Address bits 4-5
                               0 - Write Disable
                               1 - Write All
                               2 - Erase All
                               3 - Write Enable
                           1 - Write
                           2 - Read
                           3 - Erase
                - bit 8 - Start
             - 16 kbit EEPROM (16bit*1024) :
                - bits 0-9 - address
                - bits 10-11 - command :
                           0 - Extended Comand Address bits 8-9
                               0 - Write Disable
                               1 - Write All
                               2 - Erase All
                               3 - Write Enable
                           1 - Write
                           2 - Read
                           3 - Erase
                - bit 12 - Start
 - $C8 - $83 - EEPROM Command/Status :
                bit 7 - Reset
                bit 6 - Erase/Protect
                bit 5 - Write
                bit 4 - Read
                bit 3 - Reset complete (Read only)
                bit 2 - Erase complete (Read only)
                bit 1 - Write complete (Read only)
                bit 0 - Read complete (Read only)
 - $C9 - $D1 - ^^^
 // The rest only 2003/Luxor 2
 - $CA - $D1 - RTC Command / Status
                Write :
                        - $10 - Reset
                        - $12 - ??? Alarm ???
                        - $13 - ???
                        - $14 - Set Time
                        - $15 - Get Time
                        - $18 - Set Alarm
                Read:
                         - bit 7 - Ack [HACK = 1]
 - $CB - $D1 - RTC Data
                Write :
                        Sometimes $40 , and wait for bit 7 = 1
                After Command ($CA):
                        - $14 - 7 writes (all BCD):
                                - Year ( + 2000)
                                - Month
                                - Day
                                - Day Of Week
                                - Hour
                                - Min
                                - Sec
                Read
                        After Command ($CA) :
                        - $13 - bit 7 - Ack [HACK = 1]
                        - $15 - 7 reads (all BCD)
                                - Year ( + 2000)
                                - Month
                                - Day
                                - Day Of Week
                                - Hour
                                - Min
                                - Sec
 - $CC - $D1 - GPIO enable
 - $CD - $D1 - GPIO data
 - $CE - $D1 - MEMORY_CTRL, bit 0 switch between "ROM" and SRAM @ 0x10000.
 - $CF - $D1 - ROM Bank selector for segment 4-F
 - $D0 - $D1 - SRAM Bank selector low
 - $D1 - $D1 - SRAM Bank selector high
 - $D2 - $D1 - BNK2SLCT - ROM Bank selector for segment 2 low
 - $D3 - $D1 - BNK2SLCT - ROM Bank selector for segment 2 high
 - $D4 - $D1 - BNK3SLCT - ROM Bank selector for segment 3 low
 - $D5 - $D1 - BNK3SLCT - ROM Bank selector for segment 3 high
 - $D6 - $D1 - ???
 - $D7 - $D1 - ???
 - $D8 - $D1 - ???
 - $D9 - $D1 - ???
 - $DA - $D1 - ???
 - $DB - $D1 - ???
 - $DC - $D1 - ???
 - $DD - $D1 - ???
 - $DE - $D1 - ???
 - $DF - $D1 - ???
 - $E0 - $D1 - ???
 - $E1 - $D1 - ???
 - $E2 - $D1 - ???
 - $E3 - $D1 - ???
 - $E4 - $D1 - ???
 - $E5 - $D1 - ???
 - $E6 - $D1 - ???
 - $E7 - $D1 - ???
 - $E8 - $D1 - ???
 - $E9 - $D1 - ???
 - $EA - $D1 - ???
 - $EB - $D1 - ???
 - $EC - $D1 - ???
 - $ED - $D1 - ???
 - $EE - $D1 - ???
 - $EF - $D1 - ???
 - $F0 - $D1 - ???
 - $F1 - $D1 - ???
 - $F2 - $D1 - ???
 - $F3 - $D1 - ???
 - $F4 - $D1 - ???
 - $F5 - $D1 - ???
 - $F6 - $D1 - ???
 - $F7 - $D1 - ???
 - $F8 - $D1 - ???
 - $F9 - $D1 - ???
 - $FA - $D1 - ???
 - $FB - $D1 - ???
 - $FC - $D1 - ???
 - $FD - $D1 - ???
 - $FE - $D1 - ???
 - $FF - $D1 - ???
